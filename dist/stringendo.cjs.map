{"version":3,"file":"stringendo.cjs","sources":["../src/index.mjs"],"sourcesContent":["const EMOJI = /(?:[\\u2700-\\u27bf]|(?:\\ud83c[\\udde6-\\uddff]){2}|[\\ud800-\\udbff][\\udc00-\\udfff]|[\\u0023-\\u0039]\\ufe0f?\\u20e3|\\u3299|\\u3297|\\u303d|\\u3030|\\u24c2|\\ud83c[\\udd70-\\udd71]|\\ud83c[\\udd7e-\\udd7f]|\\ud83c\\udd8e|\\ud83c[\\udd91-\\udd9a]|\\ud83c[\\udde6-\\uddff]|\\ud83c[\\ude01-\\ude02]|\\ud83c\\ude1a|\\ud83c\\ude2f|\\ud83c[\\ude32-\\ude3a]|\\ud83c[\\ude50-\\ude51]|\\u203c|\\u2049|[\\u25aa-\\u25ab]|\\u25b6|\\u25c0|[\\u25fb-\\u25fe]|\\u00a9|\\u00ae|\\u2122|\\u2139|\\ud83c\\udc04|[\\u2600-\\u26FF]|\\u2b05|\\u2b06|\\u2b07|\\u2b1b|\\u2b1c|\\u2b50|\\u2b55|\\u231a|\\u231b|\\u2328|\\u23cf|[\\u23e9-\\u23f3]|[\\u23f8-\\u23fa]|\\ud83c\\udccf|\\u2934|\\u2935|[\\u2190-\\u21ff])/g;\n\n/**\n * @param {string} text\n * @returns {boolean}\n */\nfunction stringHasEmoji(text) {\n  const result = text.match(EMOJI) || [];\n  return Boolean(result.length);\n}\n\n/**\n * @name stringendo\n * @param {string} text\n * @param {boolean=} print\n * @returns {{urls: {uri: string, url: string}, flags: {isMultiline: boolean, isUrlFriendly: boolean, hasNonASCII: boolean, isLowerCased: boolean, isTrimmed: boolean, isUpperCased: boolean, isNormalized: boolean, hasEmoji: boolean}, information: {characters: number, length: number, lines: number}, text: {string: string, normalized: string, lower: string, upper, json: string}, list: {codes: [], chars: []}}}\n */\nexport function stringendo(text, print = true) {\n  const txt = text.toString();\n  const url = encodeURIComponent(txt);\n  const arr = [...txt];\n  const characters = arr.length;\n  const hasEmoji = stringHasEmoji(txt);\n  const isUrlFriendly = url.localeCompare(txt) === 0;\n  const json = JSON.stringify(txt);\n  const length = txt.length;\n  const normalized = txt.normalize();\n  const isNormalized = txt.localeCompare(normalized) === 0;\n  const string = txt;\n  const hasNonASCII = length !== characters;\n  const strLower = txt.toLowerCase();\n  const strUpper = txt.toUpperCase();\n  const isLowerCased = txt.localeCompare(strLower) === 0;\n  const isUpperCased = txt.localeCompare(strUpper) === 0;\n  const isTrimmed = txt.trim().localeCompare(txt) === 0;\n  const lines = (txt.match(/\\u000A/g) || []).length + 1;\n  const uri = encodeURI(txt);\n  const urls = {\n    uri,\n    url,\n  };\n  const data = {\n    json,\n    lower: strLower,\n    normalized,\n    string,\n    upper: strUpper,\n  };\n  const information = {\n    characters,\n    length,\n    lines,\n  };\n  const flags = {\n    hasEmoji,\n    hasNonASCII,\n    isLowerCased,\n    isMultiline: Boolean(lines),\n    isNormalized,\n    isTrimmed,\n    isUpperCased,\n    isUrlFriendly,\n  };\n  const list = {\n    chars: [],\n    codes: [],\n  };\n  arr.forEach((value) => {\n    list.chars.push(value);\n    list.codes.push(value.charCodeAt(0));\n  });\n  if (print) {\n    console.group(\"String inspection:\");\n    console.group(\"Texts:\");\n    console.table(data);\n    console.groupEnd();\n    console.group(\"Information:\");\n    console.table(information);\n    console.groupEnd();\n    console.group(\"Flags:\");\n    console.table(flags);\n    console.groupEnd();\n    console.group(\"URI:\");\n    console.log(urls.uri);\n    console.groupEnd();\n    console.group(\"URL:\");\n    console.log(urls.url);\n    console.groupEnd();\n    console.group(\"Characters:\");\n    console.log(JSON.stringify(list.chars));\n    console.groupEnd();\n    console.group(\"Character codes:\");\n    console.log(JSON.stringify(list.codes));\n    console.groupEnd();\n    console.groupEnd();\n  }\n  return {\n    text: data,\n    information,\n    flags,\n    urls,\n    list,\n  };\n}\n"],"names":["EMOJI","stringendo","text","print","txt","toString","url","encodeURIComponent","arr","characters","length","hasEmoji","stringHasEmoji","result","match","Boolean","isUrlFriendly","localeCompare","json","JSON","stringify","normalized","normalize","isNormalized","string","hasNonASCII","strLower","toLowerCase","strUpper","toUpperCase","isLowerCased","isUpperCased","isTrimmed","trim","lines","urls","uri","encodeURI","data","lower","upper","information","flags","isMultiline","list","chars","codes","forEach","value","push","charCodeAt","console","group","table","groupEnd","log"],"mappings":"oEAAA,MAAMA,EAAQ,onBAiBP,SAASC,WAAWC,EAAMC,GAAQ,GACvC,MAAMC,EAAMF,EAAKG,WACXC,EAAMC,mBAAmBH,GACzBI,EAAM,IAAIJ,GACVK,EAAaD,EAAIE,OACjBC,EAhBR,SAASC,eAAeV,GACtB,MAAMW,EAASX,EAAKY,MAAMd,IAAU,GACpC,OAAOe,QAAQF,EAAOH,QAcLE,CAAeR,GAC1BY,EAA2C,IAA3BV,EAAIW,cAAcb,GAClCc,EAAOC,KAAKC,UAAUhB,GACtBM,EAASN,EAAIM,OACbW,EAAajB,EAAIkB,YACjBC,EAAiD,IAAlCnB,EAAIa,cAAcI,GACjCG,EAASpB,EACTqB,EAAcf,IAAWD,EACzBiB,EAAWtB,EAAIuB,cACfC,EAAWxB,EAAIyB,cACfC,EAA+C,IAAhC1B,EAAIa,cAAcS,GACjCK,EAA+C,IAAhC3B,EAAIa,cAAcW,GACjCI,EAA8C,IAAlC5B,EAAI6B,OAAOhB,cAAcb,GACrC8B,GAAS9B,EAAIU,MAAM,YAAc,IAAIJ,OAAS,EAE9CyB,EAAO,CACXC,IAFUC,UAAUjC,GAGpBE,IAAAA,GAEIgC,EAAO,CACXpB,KAAAA,EACAqB,MAAOb,EACPL,WAAAA,EACAG,OAAAA,EACAgB,MAAOZ,GAEHa,EAAc,CAClBhC,WAAAA,EACAC,OAAAA,EACAwB,MAAAA,GAEIQ,EAAQ,CACZ/B,SAAAA,EACAc,YAAAA,EACAK,aAAAA,EACAa,YAAa5B,QAAQmB,GACrBX,aAAAA,EACAS,UAAAA,EACAD,aAAAA,EACAf,cAAAA,GAEI4B,EAAO,CACXC,MAAO,GACPC,MAAO,IA+BT,OA7BAtC,EAAIuC,QAASC,IACXJ,EAAKC,MAAMI,KAAKD,GAChBJ,EAAKE,MAAMG,KAAKD,EAAME,WAAW,MAE/B/C,IACFgD,QAAQC,MAAM,sBACdD,QAAQC,MAAM,UACdD,QAAQE,MAAMf,GACda,QAAQG,WACRH,QAAQC,MAAM,gBACdD,QAAQE,MAAMZ,GACdU,QAAQG,WACRH,QAAQC,MAAM,UACdD,QAAQE,MAAMX,GACdS,QAAQG,WACRH,QAAQC,MAAM,QACdD,QAAQI,IAAIpB,EAAKC,KACjBe,QAAQG,WACRH,QAAQC,MAAM,QACdD,QAAQI,IAAIpB,EAAK7B,KACjB6C,QAAQG,WACRH,QAAQC,MAAM,eACdD,QAAQI,IAAIpC,KAAKC,UAAUwB,EAAKC,QAChCM,QAAQG,WACRH,QAAQC,MAAM,oBACdD,QAAQI,IAAIpC,KAAKC,UAAUwB,EAAKE,QAChCK,QAAQG,WACRH,QAAQG,YAEH,CACLpD,KAAMoC,EACNG,YAAAA,EACAC,MAAAA,EACAP,KAAAA,EACAS,KAAAA"}