{"version":3,"file":"stringendo.js","sources":["../src/utils/castToString.mjs","../src/const/emoji.mjs","../src/utils/isSame.mjs","../src/core/stringendo.mjs","../src/core/information/textCharCount.mjs","../src/core/flags/textHasEmoji.mjs","../src/core/flags/textHasNonASCII.mjs","../src/core/flags/textIsMultiline.mjs","../src/core/flags/textIsNormalized.mjs","../src/core/flags/textIsTrimmed.mjs","../src/core/information/textLength.mjs","../src/core/information/textLineCount.mjs","../src/core/list/textListChars.mjs","../src/core/list/textListCodes.mjs","../src/core/convert/textToURI.mjs","../src/core/convert/textToURL.mjs"],"sourcesContent":["/**\n * @name castToString\n * @param {*} value\n * @returns {string}\n */\nexport function castToString(value) {\n  if (value === null || value === undefined) {\n    return \"\";\n  }\n  if (typeof value === \"string\") {\n    return value;\n  }\n  const result = value.toString();\n  if (result === \"0\" && Object.is(value, -0)) {\n    return \"-0\";\n  }\n  return result;\n}\n","export const EMOJI = /(?:[\\u2700-\\u27bf]|(?:\\ud83c[\\udde6-\\uddff]){2}|[\\ud800-\\udbff][\\udc00-\\udfff]|[\\u0023-\\u0039]\\ufe0f?\\u20e3|\\u3299|\\u3297|\\u303d|\\u3030|\\u24c2|\\ud83c[\\udd70-\\udd71]|\\ud83c[\\udd7e-\\udd7f]|\\ud83c\\udd8e|\\ud83c[\\udd91-\\udd9a]|\\ud83c[\\udde6-\\uddff]|\\ud83c[\\ude01-\\ude02]|\\ud83c\\ude1a|\\ud83c\\ude2f|\\ud83c[\\ude32-\\ude3a]|\\ud83c[\\ude50-\\ude51]|\\u203c|\\u2049|[\\u25aa-\\u25ab]|\\u25b6|\\u25c0|[\\u25fb-\\u25fe]|\\u00a9|\\u00ae|\\u2122|\\u2139|\\ud83c\\udc04|[\\u2600-\\u26FF]|\\u2b05|\\u2b06|\\u2b07|\\u2b1b|\\u2b1c|\\u2b50|\\u2b55|\\u231a|\\u231b|\\u2328|\\u23cf|[\\u23e9-\\u23f3]|[\\u23f8-\\u23fa]|\\ud83c\\udccf|\\u2934|\\u2935|[\\u2190-\\u21ff])/g;\n","/**\n * @name isSame\n * @param {string} text1\n * @param {string} text2\n * @returns {boolean}\n */\nexport function isSame(text1, text2) {\n  return text1.localeCompare(text2) === 0;\n}\n","import { EMOJI } from \"../const/emoji\";\nimport { castToString } from \"../utils/castToString\";\n\n/**\n * @name stringendo\n * @namespace stringendo\n * @param {string} text\n * @param {boolean=} print\n * @returns {{urls: {uri: string, url: string}, flags: {isMultiline: boolean, isUrlFriendly: boolean, hasNonASCII: boolean, isLowerCased: boolean, isTrimmed: boolean, isUpperCased: boolean, isNormalized: boolean, hasEmoji: boolean}, information: {characters: number, length: number, lines: number}, text: {string: string, normalized: string, lower: string, upper, json: string}, list: {codes: [], chars: []}}}\n */\nexport function stringendo(text, print = true) {\n  const txt = castToString(text);\n  const url = encodeURIComponent(txt);\n  const arr = [...txt];\n  const characters = arr.length;\n  const length = txt.length;\n  const normalized = txt.normalize();\n  const strLower = txt.toLowerCase();\n  const strUpper = txt.toUpperCase();\n  const lines = (txt.match(/\\u000A/g) || []).length + 1;\n  const urls = {\n    uri: encodeURI(txt),\n    url,\n  };\n  const data = {\n    json: JSON.stringify(txt),\n    lower: strLower,\n    normalized,\n    string: txt,\n    upper: strUpper,\n  };\n  const information = {\n    characters,\n    length,\n    lines,\n  };\n  const flags = {\n    hasEmoji: Boolean((txt.match(EMOJI) || []).length),\n    hasNonASCII: length !== characters,\n    isLowerCased: txt.localeCompare(strLower) === 0,\n    isMultiline: lines > 1,\n    isNormalized: txt.localeCompare(normalized) === 0,\n    isTrimmed: txt.trim().localeCompare(txt) === 0,\n    isUpperCased: txt.localeCompare(strUpper) === 0,\n    isUrlFriendly: url.localeCompare(txt) === 0,\n  };\n  const list = {\n    chars: [],\n    codes: [],\n  };\n  arr.forEach((value) => {\n    list.chars.push(value);\n    list.codes.push(value.charCodeAt(0));\n  });\n  if (print) {\n    console.group(\"String inspection:\");\n    console.group(\"Texts:\");\n    console.table(data);\n    console.groupEnd();\n    console.group(\"Information:\");\n    console.table(information);\n    console.groupEnd();\n    console.group(\"Flags:\");\n    console.table(flags);\n    console.groupEnd();\n    console.group(\"URI:\");\n    console.log(urls.uri);\n    console.groupEnd();\n    console.group(\"URL:\");\n    console.log(urls.url);\n    console.groupEnd();\n    console.group(\"Characters:\");\n    console.log(JSON.stringify(list.chars));\n    console.groupEnd();\n    console.group(\"Character codes:\");\n    console.log(JSON.stringify(list.codes));\n    console.groupEnd();\n    console.groupEnd();\n  }\n  return {\n    text: data,\n    information,\n    flags,\n    urls,\n    list,\n  };\n}\n","import { castToString } from \"../../utils/castToString\";\n\n/**\n * @name textCharCount\n * @namespace stringendo\n * @param {string} text\n * @returns {number}\n */\nexport function textCharCount(text) {\n  return [...castToString(text)].length;\n}\n","import { EMOJI } from \"../../const/emoji\";\nimport { castToString } from \"../../utils/castToString\";\n\n/**\n * @name textHasEmoji\n * @namespace stringendo\n * @param {string} text\n * @returns {boolean}\n */\nexport function textHasEmoji(text) {\n  return Boolean((castToString(text).match(EMOJI) || []).length);\n}\n","import { castToString } from \"../../utils/castToString\";\n\n/**\n * @name textHasNonASCII\n * @namespace stringendo\n * @param {string} text\n * @returns {boolean}\n */\nexport function textHasNonASCII(text) {\n  const txt = castToString(text);\n  return txt.length !== [...txt].length;\n}\n","import { castToString } from \"../../utils/castToString\";\n\n/**\n * @name textIsMultiline\n * @namespace stringendo\n * @param {string} text\n * @returns {boolean}\n */\nexport function textIsMultiline(text) {\n  return (castToString(text).match(/\\u000A/g) || []).length + 1 > 1;\n}\n","import { castToString } from \"../../utils/castToString\";\nimport { isSame } from \"../../utils/isSame\";\n\n/**\n * @name textIsNormalized\n * @namespace stringendo\n * @param {string} text\n * @returns {boolean}\n */\nexport function textIsNormalized(text) {\n  const txt = castToString(text);\n  return isSame(txt.normalize(), txt);\n}\n","import { castToString } from \"../../utils/castToString\";\nimport { isSame } from \"../../utils/isSame\";\n\n/**\n * @name textIsTrimmed\n * @namespace stringendo\n * @param {string} text\n * @returns {boolean}\n */\nexport function textIsTrimmed(text) {\n  const txt = castToString(text);\n  return isSame(txt.trim(), txt);\n}\n","import { castToString } from \"../../utils/castToString\";\n\n/**\n * @name textLength\n * @namespace stringendo\n * @param {string} text\n * @returns {number}\n */\nexport function textLength(text) {\n  return castToString(text).length;\n}\n","import { castToString } from \"../../utils/castToString\";\n\n/**\n * @name textLineCount\n * @namespace stringendo\n * @param {string} text\n * @returns {number}\n */\nexport function textLineCount(text) {\n  return (castToString(text).match(/\\u000A/g) || []).length + 1;\n}\n","import { castToString } from \"../../utils/castToString\";\n\n/**\n * @name textListChars\n * @namespace stringendo\n * @param {string} text\n * @returns {Array.<string>}\n */\nexport function textListChars(text) {\n  return [...castToString(text)];\n}\n","import { castToString } from \"../../utils/castToString\";\n\n/**\n * @name textListCodes\n * @namespace stringendo\n * @param {string} text\n * @returns {Array.<number>}\n */\nexport function textListCodes(text) {\n  return [...castToString(text)].map((value) => value.charCodeAt(0));\n}\n","import { castToString } from \"../../utils/castToString\";\n\n/**\n * @name textToURI\n * @namespace stringendo\n * @param {string} text\n * @returns {string}\n */\nexport function textToURI(text) {\n  const txt = castToString(text);\n  try {\n    return encodeURI(txt);\n  } catch (error) {\n    return \"\";\n  }\n}\n","import { castToString } from \"../../utils/castToString\";\n\n/**\n * @name textToURL\n * @namespace stringendo\n * @param {string} text\n * @returns {string}\n */\nexport function textToURL(text) {\n  const txt = castToString(text);\n  try {\n    return encodeURIComponent(txt);\n  } catch (error) {\n    return \"\";\n  }\n}\n"],"names":["castToString","value","result","toString","Object","is","EMOJI","isSame","text1","text2","localeCompare","stringendo","text","print","txt","url","encodeURIComponent","arr","characters","length","normalized","normalize","strLower","toLowerCase","strUpper","toUpperCase","lines","match","urls","uri","encodeURI","data","json","JSON","stringify","lower","string","upper","information","flags","hasEmoji","Boolean","hasNonASCII","isLowerCased","isMultiline","isNormalized","isTrimmed","trim","isUpperCased","isUrlFriendly","list","chars","codes","forEach","push","charCodeAt","console","group","table","groupEnd","log","textCharCount","textHasEmoji","textHasNonASCII","textIsMultiline","textIsNormalized","textIsTrimmed","textLength","textLineCount","textListChars","textListCodes","map","textToURI","error","textToURL"],"mappings":"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"}