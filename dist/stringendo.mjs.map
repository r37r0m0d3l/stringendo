{"version":3,"file":"stringendo.mjs","sources":["../src/utils/castToString.mjs","../src/core/convert/textToURI.mjs","../src/core/convert/textToURL.mjs","../src/const/emoji.mjs","../src/core/flags/textHasEmoji.mjs","../src/core/flags/textHasNonASCII.mjs","../src/core/flags/textIsMultiline.mjs","../src/utils/isSame.mjs","../src/core/flags/textIsNormalized.mjs","../src/core/flags/textIsTrimmed.mjs","../src/core/information/textCharCount.mjs","../src/core/information/textLength.mjs","../src/core/information/textLineCount.mjs","../src/core/list/textListChars.mjs","../src/core/list/textListCodes.mjs","../src/core/stringendo.mjs"],"sourcesContent":["/**\n * @name castToString\n * @param {*} value\n * @returns {string}\n */\nexport function castToString(value) {\n  if (value === null || value === undefined) {\n    return \"\";\n  }\n  if (typeof value === \"string\") {\n    return value;\n  }\n  const result = value.toString();\n  if (result === \"0\" && Object.is(value, -0)) {\n    return \"-0\";\n  }\n  return result;\n}\n","import { castToString } from \"../../utils/castToString\";\n\n/**\n * @name textToURI\n * @namespace stringendo\n * @param {string} text\n * @returns {string}\n */\nexport function textToURI(text) {\n  const txt = castToString(text);\n  try {\n    return encodeURI(txt);\n  } catch (error) {\n    return \"\";\n  }\n}\n","import { castToString } from \"../../utils/castToString\";\n\n/**\n * @name textToURL\n * @namespace stringendo\n * @param {string} text\n * @returns {string}\n */\nexport function textToURL(text) {\n  const txt = castToString(text);\n  try {\n    return encodeURIComponent(txt);\n  } catch (error) {\n    return \"\";\n  }\n}\n","export const EMOJI = /(?:[\\u2700-\\u27bf]|(?:\\ud83c[\\udde6-\\uddff]){2}|[\\ud800-\\udbff][\\udc00-\\udfff]|[\\u0023-\\u0039]\\ufe0f?\\u20e3|\\u3299|\\u3297|\\u303d|\\u3030|\\u24c2|\\ud83c[\\udd70-\\udd71]|\\ud83c[\\udd7e-\\udd7f]|\\ud83c\\udd8e|\\ud83c[\\udd91-\\udd9a]|\\ud83c[\\udde6-\\uddff]|\\ud83c[\\ude01-\\ude02]|\\ud83c\\ude1a|\\ud83c\\ude2f|\\ud83c[\\ude32-\\ude3a]|\\ud83c[\\ude50-\\ude51]|\\u203c|\\u2049|[\\u25aa-\\u25ab]|\\u25b6|\\u25c0|[\\u25fb-\\u25fe]|\\u00a9|\\u00ae|\\u2122|\\u2139|\\ud83c\\udc04|[\\u2600-\\u26FF]|\\u2b05|\\u2b06|\\u2b07|\\u2b1b|\\u2b1c|\\u2b50|\\u2b55|\\u231a|\\u231b|\\u2328|\\u23cf|[\\u23e9-\\u23f3]|[\\u23f8-\\u23fa]|\\ud83c\\udccf|\\u2934|\\u2935|[\\u2190-\\u21ff])/g;\n","import { EMOJI } from \"../../const/emoji\";\nimport { castToString } from \"../../utils/castToString\";\n\n/**\n * @name textHasEmoji\n * @namespace stringendo\n * @param {string} text\n * @returns {boolean}\n */\nexport function textHasEmoji(text) {\n  return Boolean((castToString(text).match(EMOJI) || []).length);\n}\n","import { castToString } from \"../../utils/castToString\";\n\n/**\n * @name textHasNonASCII\n * @namespace stringendo\n * @param {string} text\n * @returns {boolean}\n */\nexport function textHasNonASCII(text) {\n  const txt = castToString(text);\n  return txt.length !== [...txt].length;\n}\n","import { castToString } from \"../../utils/castToString\";\n\n/**\n * @name textIsMultiline\n * @namespace stringendo\n * @param {string} text\n * @returns {boolean}\n */\nexport function textIsMultiline(text) {\n  return (castToString(text).match(/\\u000A/g) || []).length + 1 > 1;\n}\n","/**\n * @name isSame\n * @param {string} text1\n * @param {string} text2\n * @returns {boolean}\n */\nexport function isSame(text1, text2) {\n  return text1.localeCompare(text2) === 0;\n}\n","import { castToString } from \"../../utils/castToString\";\nimport { isSame } from \"../../utils/isSame\";\n\n/**\n * @name textIsNormalized\n * @namespace stringendo\n * @param {string} text\n * @returns {boolean}\n */\nexport function textIsNormalized(text) {\n  const txt = castToString(text);\n  return isSame(txt.normalize(), txt);\n}\n","import { castToString } from \"../../utils/castToString\";\nimport { isSame } from \"../../utils/isSame\";\n\n/**\n * @name textIsTrimmed\n * @namespace stringendo\n * @param {string} text\n * @returns {boolean}\n */\nexport function textIsTrimmed(text) {\n  const txt = castToString(text);\n  return isSame(txt.trim(), txt);\n}\n","import { castToString } from \"../../utils/castToString\";\n\n/**\n * @name textCharCount\n * @namespace stringendo\n * @param {string} text\n * @returns {number}\n */\nexport function textCharCount(text) {\n  return [...castToString(text)].length;\n}\n","import { castToString } from \"../../utils/castToString\";\n\n/**\n * @name textLength\n * @namespace stringendo\n * @param {string} text\n * @returns {number}\n */\nexport function textLength(text) {\n  return castToString(text).length;\n}\n","import { castToString } from \"../../utils/castToString\";\n\n/**\n * @name textLineCount\n * @namespace stringendo\n * @param {string} text\n * @returns {number}\n */\nexport function textLineCount(text) {\n  return (castToString(text).match(/\\u000A/g) || []).length + 1;\n}\n","import { castToString } from \"../../utils/castToString\";\n\n/**\n * @name textListChars\n * @namespace stringendo\n * @param {string} text\n * @returns {Array.<string>}\n */\nexport function textListChars(text) {\n  return [...castToString(text)];\n}\n","import { castToString } from \"../../utils/castToString\";\n\n/**\n * @name textListCodes\n * @namespace stringendo\n * @param {string} text\n * @returns {Array.<number>}\n */\nexport function textListCodes(text) {\n  return [...castToString(text)].map((value) => value.charCodeAt(0));\n}\n","import { EMOJI } from \"../const/emoji\";\nimport { castToString } from \"../utils/castToString\";\n\n/**\n * @name stringendo\n * @namespace stringendo\n * @param {string} text\n * @param {boolean=} print\n * @returns {{urls: {uri: string, url: string}, flags: {isMultiline: boolean, isUrlFriendly: boolean, hasNonASCII: boolean, isLowerCased: boolean, isTrimmed: boolean, isUpperCased: boolean, isNormalized: boolean, hasEmoji: boolean}, information: {characters: number, length: number, lines: number}, text: {string: string, normalized: string, lower: string, upper, json: string}, list: {codes: [], chars: []}}}\n */\nexport function stringendo(text, print = true) {\n  const txt = castToString(text);\n  const url = encodeURIComponent(txt);\n  const arr = [...txt];\n  const characters = arr.length;\n  const length = txt.length;\n  const normalized = txt.normalize();\n  const strLower = txt.toLowerCase();\n  const strUpper = txt.toUpperCase();\n  const lines = (txt.match(/\\u000A/g) || []).length + 1;\n  const urls = {\n    uri: encodeURI(txt),\n    url,\n  };\n  const data = {\n    json: JSON.stringify(txt),\n    lower: strLower,\n    normalized,\n    string: txt,\n    upper: strUpper,\n  };\n  const information = {\n    characters,\n    length,\n    lines,\n  };\n  const flags = {\n    hasEmoji: Boolean((txt.match(EMOJI) || []).length),\n    hasNonASCII: length !== characters,\n    isLowerCased: txt.localeCompare(strLower) === 0,\n    isMultiline: lines > 1,\n    isNormalized: txt.localeCompare(normalized) === 0,\n    isTrimmed: txt.trim().localeCompare(txt) === 0,\n    isUpperCased: txt.localeCompare(strUpper) === 0,\n    isUrlFriendly: url.localeCompare(txt) === 0,\n  };\n  const list = {\n    chars: [],\n    codes: [],\n  };\n  arr.forEach((value) => {\n    list.chars.push(value);\n    list.codes.push(value.charCodeAt(0));\n  });\n  if (print) {\n    console.group(\"String inspection:\");\n    console.group(\"Texts:\");\n    console.table(data);\n    console.groupEnd();\n    console.group(\"Information:\");\n    console.table(information);\n    console.groupEnd();\n    console.group(\"Flags:\");\n    console.table(flags);\n    console.groupEnd();\n    console.group(\"URI:\");\n    console.log(urls.uri);\n    console.groupEnd();\n    console.group(\"URL:\");\n    console.log(urls.url);\n    console.groupEnd();\n    console.group(\"Characters:\");\n    console.log(JSON.stringify(list.chars));\n    console.groupEnd();\n    console.group(\"Character codes:\");\n    console.log(JSON.stringify(list.codes));\n    console.groupEnd();\n    console.groupEnd();\n  }\n  return {\n    text: data,\n    information,\n    flags,\n    urls,\n    list,\n  };\n}\n"],"names":["castToString","value","result","toString","Object","is","textToURI","text","txt","encodeURI","error","textToURL","encodeURIComponent","EMOJI","textHasEmoji","Boolean","match","length","textHasNonASCII","textIsMultiline","isSame","text1","text2","localeCompare","textIsNormalized","normalize","textIsTrimmed","trim","textCharCount","textLength","textLineCount","textListChars","textListCodes","map","charCodeAt","stringendo","print","url","arr","characters","normalized","strLower","toLowerCase","strUpper","toUpperCase","lines","urls","uri","data","json","JSON","stringify","lower","string","upper","information","flags","hasEmoji","hasNonASCII","isLowerCased","isMultiline","isNormalized","isTrimmed","isUpperCased","isUrlFriendly","list","chars","codes","forEach","push","console","group","table","groupEnd","log"],"mappings":"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"}